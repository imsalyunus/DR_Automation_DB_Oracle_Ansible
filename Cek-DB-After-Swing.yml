---
- hosts: localhost
  gather_facts: no
  tasks:
    - name: "Tampilkan data dari STANDBY"
      debug:
        msg: "{{ standby_db }}"

    - name: "Tampilkan data dari PRIMARY"
      debug:
        msg: "{{ primary_db }}"

    - name: "Debug nilai primary_db"
      debug:
        msg: "Primary DB is set to: {{ primary_db }}"

    - name: "Debug nilai standby_db"
      debug:
        msg: "Standby DB is set to: {{ standby_db }}"

######################################
- name: Query Oracle Database Role and Switchover Status
  hosts: "{{ primary_db }}"
  tasks:
    - name: Source the bash profile and set environment variables
      shell: |
        # Set Environment Variables
        export ORACLE_HOME=/u01/app/oracle/product/19.3.0/dbhome_1
        export ORACLE_SID=orcl
        export PATH=$PATH:$ORACLE_HOME/bin
        # Query the database role
        echo "SELECT database_role FROM v\$database;" | sqlplus -s / as sysdba
      register: db_role_status
      ignore_errors: yes

    - name: Display database role status
      debug:
        msg: "Database role status: {{ db_role_status.stdout }}"

    - name: Set database role
      set_fact:
        database_role: "{{ db_role_status.stdout_lines[3] | trim }}"

    - name: Check database role
      debug:
        msg: "Database role is 'PHYSICAL STANDBY'. Process successful."
      when: database_role == "PHYSICAL STANDBY"

    - name: Fail if database role is not PHYSICAL STANDBY
      fail:
        msg: "Database role is not 'PHYSICAL STANDBY'. Current role: {{ database_role }}"
      when: database_role != "PHYSICAL STANDBY"

#########################################
- name: Query Oracle Database Role and Switchover Status
  hosts: "{{ standby_db }}"
  tasks:
    - name: Source the bash profile and set environment variables
      shell: |
        # Set Environment Variables
        export ORACLE_HOME=/u01/app/oracle/product/19.3.0/dbhome_1
        export ORACLE_SID=orcl
        export PATH=$PATH:$ORACLE_HOME/bin

        # Query the database role
        echo "SELECT database_role FROM v\$database;" | sqlplus -s / as sysdba
      register: db_role_status
      ignore_errors: yes

    - name: Display database role status
      debug:
        msg: "Database role status: {{ db_role_status.stdout }}"

    - name: Set database role
      set_fact:
        database_role: "{{ db_role_status.stdout_lines[3] | trim }}"  # Ambil baris ketiga dan trim whitespace

    - name: Check database role
      debug:
        msg: "Database role is 'PRIMARY'. Process successful."
      when: database_role == "PRIMARY"

    - name: Fail if database role is not PRIMARY
      fail:
        msg: "Database role is not 'PRIMARY'. Current role: {{ database_role }}"
      when: database_role != "PRIMARY"

#################
- name: Run Oracle Commands
  hosts: "{{ standby_db }}"
  tasks:
    - name: Source the bash profile and set environment variables
      shell: |
        # Set Environment Variables
        export ORACLE_HOME=/u01/app/oracle/product/19.3.0/dbhome_1
        export ORACLE_SID=orcl
        export PATH=$PATH:$ORACLE_HOME/bin
        for i in {1..3}; do
          echo "ALTER SYSTEM ARCHIVE LOG CURRENT;" | sqlplus -s / as sysdba
        done
        echo "ARCHIVE LOG LIST;" | sqlplus -s / as sysdba
      register: db_switchlog
      ignore_errors: yes

    - name: Check SQL command output
      fail:
        msg: "SQL command did not execute successfully. Output: {{ db_switchlog.stdout }}"
      when: "'System altered' not in db_switchlog.stdout"

    - name: Display SQL command result
      debug:
        msg: "{{ db_switchlog.stdout_lines }}"
####################################
- name: Query Oracle Database Role and Switchover Status
  hosts: "{{ standby_db }}"
  tasks:
    - name: Source the bash profile and set environment variables
      shell: |
        # Set Environment Variables
        export ORACLE_HOME=/u01/app/oracle/product/19.3.0/dbhome_1
        export ORACLE_SID=orcl
        export PATH=$PATH:$ORACLE_HOME/bin
        echo "SELECT inst_id, name, value FROM gv\$dataguard_stats WHERE name='apply lag';" | sqlplus -s / as sysdba
      register: db_status
      ignore_errors: yes

    - name: Check if SQL query returned "no rows selected"
      fail:
        msg: "SQL query did not return 'no rows selected'. Process halted."
      when: "'no rows selected' not in db_status.stdout"

    - name: Output SQL query results
      debug:
        msg: "{{ db_status.stdout }}"
      when: "'no rows selected' in db_status.stdout"

##########################################

- name: Query Oracle Database Role and Switchover Status other site
  hosts: "{{ primary_db }}"
  tasks:
    - name: Source the bash profile and set environment variables new
      shell: |
        # Set Environment Variables
        export ORACLE_HOME=/u01/app/oracle/product/19.3.0/dbhome_1
        export ORACLE_SID=orcl
        export PATH=$PATH:$ORACLE_HOME/bin
        echo "SELECT inst_id, name, value FROM gv\$dataguard_stats WHERE name='apply lag';" | sqlplus -s / as sysdba
      register: db_status_new
      ignore_errors: yes

    - name: Check if the query result contains the expected lag
      assert:
        that:
          - "'1 apply lag' in db_status_new.stdout"
          - "'+00 00:00:00' in db_status_new.stdout"
        fail_msg: "The query result does not contain the expected apply lag. Stopping playbook."
        success_msg: "Query result contains the expected apply lag. Proceeding with playbook."

    - name: Continue with the rest of the playbook
      debug:
        msg: "Query result verified. Proceeding with further tasks."
      when: "'1 apply lag' in db_status_new.stdout and '+00 00:00:00' in db_status_new.stdout"

#############################################

- name: Query Oracle Database Role and Switchover Status
  hosts:
    - "{{ primary_db }}"
    - "{{ standby_db }}"
  tasks:
    - name: Source the bash profile and set environment variables
      shell: |
        # Set Environment Variables
        export ORACLE_HOME=/u01/app/oracle/product/19.3.0/dbhome_1
        export ORACLE_SID=orcl
        export PATH=$PATH:$ORACLE_HOME/bin
        sqlplus -s / as sysdba <<EOF
        SET PAGESIZE 0 FEEDBACK OFF VERIFY OFF HEADING OFF ECHO OFF
        SELECT (ARCH.SEQUENCE# - APPL.SEQUENCE#) AS Difference
        FROM (
            SELECT THREAD#, SEQUENCE#
            FROM V\$ARCHIVED_LOG
            WHERE (THREAD#, FIRST_TIME) IN (
                SELECT THREAD#, MAX(FIRST_TIME)
                FROM V\$ARCHIVED_LOG
                GROUP BY THREAD#
            )
        ) ARCH,
        (
            SELECT THREAD#, SEQUENCE#
            FROM V\$LOG_HISTORY
            WHERE (THREAD#, FIRST_TIME) IN (
                SELECT THREAD#, MAX(FIRST_TIME)
                FROM V\$LOG_HISTORY
                GROUP BY THREAD#
            )
        ) APPL
        WHERE ARCH.THREAD# = APPL.THREAD#;
        EOF
      register: db_cekgap
      ignore_errors: yes

    - name: Display SQL Query Result
      debug:
        var: db_cekgap.stdout_lines

    - name: Filter for zero results
      set_fact:
        db_zero_results: "{{ db_cekgap.stdout_lines | select('equalto', '0') | list }}"

    - name: Ensure results from both hosts have the same number of zero results
      assert:
        that:
          - hostvars['ora19cdg01.bwok.org'].db_zero_results | length == hostvars['ora19cdg02.bwok.org'].db_zero_results | length
          - hostvars['ora19cdg01.bwok.org'].db_zero_results == hostvars['ora19cdg02.bwok.org'].db_zero_results
        success_msg: "Results are the same, success!"
        fail_msg: "Results are different, failure!"
