---
- name: Query Oracle Database Role and Switchover Status
  hosts: ora19cdg01.bwok.org
  tasks:
    - name: Source the bash profile and set environment variables
      shell: |
        # Set Environment Variables
        export ORACLE_HOME=/u01/app/oracle/product/19.3.0/dbhome_1
        export ORACLE_SID=orcl
        export PATH=$PATH:$ORACLE_HOME/bin

        # Run SQL Query to get database details
        echo "SELECT database_role FROM v\$database;" | sqlplus -s / as sysdba
      register: db_01p
      ignore_errors: yes

    - name: "set db standby"
      set_stats:
        data:
          standby_db:  ""

    - name: Display database role
      debug:
        msg: "db01"
      register: prim
      when: "'PRIMARY' in db_01p.stdout"

    - name: Display database role
      debug:
        msg: "db01"
      register: stby
      when: "'PHYSICAL STANDBY' in db_01p.stdout"

    - name: "set db primary"
      set_stats:
        data:
          primary_db:  "DB01"
      when: "'PRIMARY' in db_01p.stdout"

    - name: "set db standby"
      set_stats:
        data:
          standby_db:  "DB01"
      when: "'PHYSICAL STANDBY' in db_01p.stdout"

- name: Query Oracle Database Role and Switchover Status
  hosts: ora19cdg02.bwok.org
  tasks:
    - name: Source the bash profile and set environment variables
      shell: |
        # Set Environment Variables
        export ORACLE_HOME=/u01/app/oracle/product/19.3.0/dbhome_1
        export ORACLE_SID=orcl
        export PATH=$PATH:$ORACLE_HOME/bin

        # Run SQL Query to get database details
        echo "SELECT database_role FROM v\$database;" | sqlplus -s / as sysdba
      register: db_02S
      ignore_errors: yes

    - name: Display database role
      debug:
        msg: "db02"
      register: prim
      when: "'PRIMARY' in db_02S.stdout"

    - name: Display database role
      debug:
        msg: "db02"
      register: stby
      when: "'PHYSICAL STANDBY' in db_02S.stdout"

    - name: "set db primary"
      set_stats:
        data:
          primary_db:  "DB02"
      when: "'PRIMARY' in db_02S.stdout"

    - name: "set db standby"
      set_stats:
        data:
          standby_db:  "DB02"
      when: "'PHYSICAL STANDBY' in db_02S.stdout"

- name: Query Oracle Database Role and Switchover Status
  hosts:
    - ora19cdg01.bwok.org
    - ora19cdg02.bwok.org
  tasks:
    - name: Source the bash profile and set environment variables
      shell: |
        # Set Environment Variables
        export ORACLE_HOME=/u01/app/oracle/product/19.3.0/dbhome_1
        export ORACLE_SID=orcl
        export PATH=$PATH:$ORACLE_HOME/bin

        # Run SQL Query to get the database role
        sqlplus -s / as sysdba <<EOF
        SET PAGESIZE 0 FEEDBACK OFF VERIFY OFF HEADING OFF ECHO OFF
        SELECT database_role FROM v\$database;
        EOF
      register: db_status
      ignore_errors: yes

    - name: Check database role status
      set_fact:
        db_role: "{{ db_status.stdout }}"

    - name: Determine success or failure based on database role
      fail:
        msg: "Database role check failed. Output: {{ db_role }}"
      when: db_role not in ['PRIMARY', 'PHYSICAL STANDBY']

    - name: Report success
      debug:
        msg: "Database role check successful. Output: {{ db_role }}"
      when: db_role in ['PRIMARY', 'PHYSICAL STANDBY']

    - name: Set fact for database role
      set_fact:
        db_role: "{{ db_status.stdout_lines[0] }}"
      when: db_status.stdout_lines | length > 0

- name: Compare Database Roles
  hosts: localhost
  tasks:
    - name: Get roles from both hosts
      set_fact:
        db_roles:
          ora19cdg01: "{{ hostvars['ora19cdg01.bwok.org'].db_role }}"
          ora19cdg02: "{{ hostvars['ora19cdg02.bwok.org'].db_role }}"

    - name: Compare database roles
      debug:
        msg: >
          Database roles are {{ 'the same' if db_roles.ora19cdg01 == db_roles.ora19cdg02 else 'different' }}.

    - name: Determine result
      set_fact:
        result: "{{ 'gagal' if db_roles.ora19cdg01 == db_roles.ora19cdg02 else 'berhasil' }}"

    - name: Fail if roles are the same
      fail:
        msg: "Process stopped: Database roles are the same (gagal)."
      when: result == 'gagal'

    - name: Display result if not failed
      debug:
        msg: "Result: {{ result }}"
